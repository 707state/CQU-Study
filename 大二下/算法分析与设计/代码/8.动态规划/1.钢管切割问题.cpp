/*钢管切割问题：
题目：某公司生产长钢管，然后将钢条切断成不同长度去售卖。其中不同长度的钢管的售价是不一样的，但是
	它们并不是完全按照比例来，比如2米的钢管售价要比3米的钢管售价要少，但是并不是2比3的比例。钢管
	的长度售价表如下：
		长度i	1      2      3      4     5     6     7      8     9     10
		价格Pi	1      5      8      9     10    17    17     20    24    30
    于是问题就来了，比如30米长的钢管，要如何切割才能让收益最高呢？
思路：本题采用动态规划以避免子问题的重复计算，设r(n)表示长度为n的钢管的最大收益，p(n)表示长度为n
	的一段钢管的价格，则得到关系式：
		r(n)=max{p(i)+r(n-i)}(i=0,1,2,...,n)
	同时用一个数组记录r(i)处的钢管分割情况用以回溯分割情况
注：动态规划问题与递推问题不同，递推问题的r(n)只取决于r(n-1)，但本题取决于前n-1种情况
*/
#include<iostream>
using namespace std;

int main(){
	int N=10;			//钢管长度
	// int P[11]={0,1,5,8,9,10,17,17,20,24,30};	//不同长度的钢管价格
	int P[11]={0,1,5,8,9,10,17,17,20,24,25};
	int R[11]={0};		//不同长度的钢管最大利润
	int seg[11]={0};	//不同长度的分割情况
	for(int i=1;i<=N;i++){
		int profit=0;
		for(int j=0;j<=i;j++){
			if(profit<P[j]+R[i-j]){	//R[i-j]而不是R[N-j]
				profit=P[j]+R[i-j];
				R[i]=profit;
				seg[i]=j;
			}
		}
	}
	// for(int i=1;i<=N;i++){
	// 	cout<<R[i]<<" ";
	// }
	// cout<<endl;
	// for(int i=1;i<=N;i++){
	// 	cout<<seg[i]<<" ";
	// }
	cout<<"Largest profit: "<<R[N]<<endl<<"Method:";
	int cnt=N;
	while(cnt>0){
		cout<<seg[cnt]<<" ";
		cnt-=seg[cnt];
	}


	return 0;
}