/*求一批整数中出现最多的个位数字:
题目：给定一批整数，分析每个整数的每一位数字，求出现次数最多的个位数字。例如给定3个整数1234、2345、3456，其中出现最多次数的数字是3和4，均出现了3次。
输入：在第1行中给出正整数N（≤），在第二行中给出N个不超过整型范围的非负整数，数字间以空格分隔。
输出：在一行中按格式“M: n1 n2 ...”输出，其中M是最大次数，n1、n2、……为出现次数最多的个位数字，按从小到大的顺序排列。数字间以空格分隔，但末尾不得有多余空格。
输入样例：
3
1234 2345 3456
输出样例：
3: 3 4
*/
#include <iostream>
#include <stdio.h>
using namespace std;

int main() {
	int N;
	cin >> N;
	int num[10]={0};			//数组num有10位，表示0~9各数字，每位的数字表示各数字的数量
	for(int i=0;i<N;i++){
		int n;			//n表示输入的数字
		cin>>n;
		if(n==0){			//若n为单值0，无法执行循环，单独构建赋值
			num[0]+=1;
		}
		while(n){			//没有现有函数支持输出数字长度，因此对n切片各位数字
			num[n%10]++;	//因为首位数字非零，因此可以采用while(n)
			n/=10;
		}
	}					//成功构建数组，接下来寻找出现最多数字

	int max=0;
	for(int i=0;i<10;i++){
		if(max<num[i]){
			max=num[i];
		}
	}
	cout<<max<<":";

	for(int i=0;i<10;i++){		//不一定要记录出现最多的数字，只需要再次循环即可
		if(max==num[i]){
			cout<<" "<<i;
		}
	}

	return 0;
}